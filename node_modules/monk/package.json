{
  "name": "monk",
  "version": "1.0.2",
  "main": "lib/monk.js",
  "tags": [
    "mongodb",
    "mongo",
    "driver"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/LearnBoost/monk.git"
  },
  "dependencies": {
    "mongoskin": "2.0.3",
    "debug": "*",
    "mpromise": "0.5.1"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "0.1.x",
    "promises-aplus-tests": "2.0.x"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "readme": "# monk\r\n\r\n[![build status](https://secure.travis-ci.org/Automattic/monk.png?branch=master)](https://secure.travis-ci.org/Automattic/monk)\r\n\r\nMonk is a tiny layer that provides simple yet substantial usability\r\nimprovements for MongoDB usage within Node.JS.\r\n\r\n```js\r\nvar db = require('monk')('localhost/mydb');\r\nvar users = db.get('users');\r\n\r\nusers.index('name last');\r\nusers.insert({ name: 'Tobi', bigdata: {} });\r\nusers.find({ name: 'Loki' }, '-bigdata', function () {\r\n  // exclude bigdata field\r\n});\r\nusers.find({}, {sort: {name: 1}}, function () {\r\n  // sorted by name field\r\n});\r\nusers.remove({ name: 'Loki' });\r\n\r\ndb.close();\r\n```\r\n\r\n## Features\r\n\r\n- Command buffering. You can start querying right away.\r\n- Promises built-in for all queries. Easy interoperability with modules.\r\n- Easy connections / configuration\r\n- Well-designed signatures\r\n- Improvements to the MongoDB APIs (eg: `findAndModify` supports the\r\n  `update` signature style)\r\n- Auto-casting of `_id` in queries\r\n- Builds on top of [mongoskin](http://github.com/kissjs/node-mongoskin)\r\n- Allows to set global options or collection-level options for queries. (eg:\r\n  `safe` is `true` by default for all queries)\r\n\r\n## How to use\r\n\r\n### Connecting\r\n\r\n#### Single server\r\n\r\n```js\r\nvar db = require('monk')('localhost/mydb')\r\n```\r\n\r\n#### Replica set\r\n\r\n```js\r\nvar db = require('monk')('localhost/mydb,192.168.1.1')\r\n```\r\n\r\n### Disconnecting\r\n\r\n```js\r\ndb.close()\r\n```\r\n\r\n### Collections\r\n\r\n#### Getting one\r\n\r\n```js\r\nvar users = db.get('users')\r\n// users.insert(), users.update() … (see below)\r\n```\r\n\r\n#### Dropping\r\n\r\n```js\r\nusers.drop(fn);\r\n```\r\n\r\n### Signatures\r\n\r\n- All commands accept the simple `data[, …], fn`. For example\r\n    - `find({}, fn)`\r\n    - `findOne({}, fn)`\r\n    - `update({}, {}, fn)`\r\n    - `findAndModify({}, {}, fn)`\r\n    - `findById('id', fn)`\r\n    - `remove({}, fn)`\r\n- You can pass options in the middle: `data[, …], options, fn`\r\n- You can pass fields to select as an array: `data[, …], ['field', …], fn`\r\n- You can pass fields as a string delimited by spaces:\r\n  `data[, …], 'field1 field2', fn`\r\n- To exclude a field, prefix the field name with '-':\r\n  `data[, …], '-field1', fn`\r\n\r\n### Promises\r\n\r\nAll methods that perform an async action return a promise.\r\n\r\n```js\r\nvar promise = users.insert({});\r\npromise.type; // 'insert' in this case\r\npromise.error(function(err){});\r\npromise.on('error', function(err){});\r\npromise.on('success', function(doc){});\r\npromise.on('complete', function(err, doc){});\r\npromise.success(function(doc){});\r\n```\r\n\r\n### Indexes\r\n\r\n```js\r\nusers.index('name.first', fn);\r\nusers.index('email', { unique: true }); // unique\r\nusers.index('name.first name.last') // compound\r\nusers.index({ 'email': 1, 'password': -1 }); // compound with sort\r\nusers.index('email', { sparse: true }, fn); // with options\r\nusers.indexes(fn); // get indexes\r\nusers.dropIndex(name, fn); // drop an index\r\nusers.dropIndexes(fn); // drop all indexes\r\n```\r\n\r\n### Inserting\r\n\r\n```js\r\nusers.insert({ a: 'b' }, function (err, doc) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n### Casting\r\n\r\nTo cast to `ObjectId`:\r\n\r\n```js\r\nusers.id() // returns new generated ObjectID\r\nusers.id('hexstring') // returns ObjectId\r\nusers.id(obj) // returns ObjectId\r\n```\r\n\r\n### Updating\r\n\r\n```js\r\nusers.update({}, {}, fn);\r\nusers.updateById('id', {}, fn);\r\n```\r\n\r\n### Finding\r\n\r\n#### Many\r\n\r\n```js\r\nusers.find({}, function (err, docs){});\r\n```\r\n\r\n#### By ID\r\n\r\n```js\r\nusers.findById('hex representation', function(err, doc){});\r\nusers.findById(oid, function(err, doc){});\r\n```\r\n\r\n#### Single doc\r\n\r\n`findOne` also provides the `findById` functionality.\r\n\r\n```js\r\nusers.findOne({ name: 'test' }).on('success', function (doc) {});\r\n```\r\n\r\n#### And modify\r\n\r\n```js\r\nusers.findAndModify({ query: {}, update: {} });\r\nusers.findAndModify({ _id: '' }, { $set: {} });\r\n```\r\n\r\n#### Streaming\r\n\r\nNote: `stream: true` is optional if you register an `each` handler in the\r\nsame tick. In the following example I just include it for extra clarity.\r\n\r\n```js\r\nusers.find({}, { stream: true })\r\n  .each(function(doc){})\r\n  .error(function(err){})\r\n  .success(function(){});\r\n```\r\n\r\n##### Destroying a cursor\r\n\r\nOn the returned promise you can call `destroy()`. Upon the cursor\r\nclosing the `success` event will be emitted.\r\n\r\n### Removing\r\n\r\n```js\r\nusers.remove({ a: 'b' }, function (err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n### Global options\r\n\r\n```js\r\nvar db = require('monk')('localhost/mydb')\r\ndb.options.multi = true; // global multi-doc update\r\ndb.get('users').options.multi = false; // collection-level\r\n```\r\n\r\nMonk sets `safe` to `true` by default.\r\n\r\n### Query debugging\r\n\r\nIf you wish to see what queries `monk` passes to the driver, simply leverage\r\n[debug](http://github.com/visionmedia/debug):\r\n\r\n```bash\r\nDEBUG=\"monk:queries\"\r\n```\r\n\r\nTo see all debugging output:\r\n\r\n```bash\r\nDEBUG=\"monk:*\"\r\n```\r\n\r\n## Contributors\r\n\r\n- [Guillermo Rauch](http://github.com/rauchg)\r\n- [Travis Jeffery](http://github.com/travisjeffery)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "gitHead": "94667242a9cc3b6d16371fc8470eac5d7ef6d35f",
  "description": "[![build status](https://secure.travis-ci.org/Automattic/monk.png?branch=master)](https://secure.travis-ci.org/Automattic/monk)",
  "bugs": {
    "url": "https://github.com/LearnBoost/monk/issues"
  },
  "homepage": "https://github.com/LearnBoost/monk#readme",
  "_id": "monk@1.0.2",
  "_shasum": "ff91de2bf3df41c08f6aac3dec2ca0164fd606c9",
  "_from": "git+https://github.com/vccabral/monk.git",
  "_resolved": "git+https://github.com/vccabral/monk.git#94667242a9cc3b6d16371fc8470eac5d7ef6d35f"
}
